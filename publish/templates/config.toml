[DATA]
# The file directory where the node can store its persistent data.
# These are usually 2 SQLite3 database files, along with 2 additional WAL files, each.
# dir = "<path>"



[LEDGER.SNAPSHOT]




[[LEDGER.SOURCES]]
# At least one connection to a rippled or clio node is required to read and observe the XRP Ledger.
# It is generally advised to provide multiple different nodes to ensure a fast and reliable data feed.
# If possible, provide an admin connection here.

# The websocket URL of the rippled/clio node.
url = "wss://xrplcluster.com"

# Restrict the commands called on this node to a set of commands.
# For example, if you want this node to only provide live data, and no backfill support, set it to:
# allowed_commands = ['subscribe']

# Make multiple parallel connections to the same node.
# This should only ever be used on a self hosted node.
# connections = 3

[[LEDGER.SOURCES]]
url = "wss://s2.ripple.com"

[[LEDGER.SOURCES]]
url = "wss://s1.ripple.com"



[[ISSUERS.AUX]]
# Auxilliary providers publish .toml files that define XLS-26 token metadata.
# They do this for as many different tokens as they like. It is up to you to pick trusted publishers.

# The URL of the .toml file to read
url = "https://static.xrplmeta.org/trusted.toml"

# A unique internal identifier for this particular list. This is relevant below in the "SERVER" stanza.
name = "xrplmeta"

# Wether or not to fully trust this metadata publisher. If the publisher marks a token as trusted, so will your node.
trusted = true

# How long to wait before reading the .toml file again
refresh_interval = 30



[THIRDPARY.XRPSCAN]
# xrpscan.com provides usernames, social media links and verifications for XRPL accounts.
# https://docs.xrpscan.com/api-doc.html#get-names
# Defines how long to wait before fetching their data again, in seconds.
refresh_interval = 600



[THIRDPARY.GRAVATAR]
# gravatar.com provides avatar images for XRPL accounts that have the "EmailHash" field set.
# Defines how long to wait before refreshing the avatar for each account.
refresh_interval = 3600
max_requests_per_minute = 60



[THIRDPARY.XUMM]
# xumm.app provides a list of curated assets, KYC status and avatar images.
# It is required to obtain an API key to use this service.
# https://apps.xumm.dev

# api_key = "<key>"
# api_secret = "<secret>"
# refresh_interval_assets = 600
# refresh_interval_kyc = 86400
# refresh_interval_avatar = 86400
# max_requests_per_minute = 60



[THIRDPARY.BITHOMP]
# bithomp.com provides icons, usernames, website and social media links for XRPL accounts.
# It is required to obtain an API key for this service.
# https://bithomp.com/developer

# refresh_interval = 600
# api_key = "<key>"



[THIRDPARY.TWITTER]
# twitter.com can provide icons, display names, website links and descriptions for both XRPL accounts and tokens.
# It is required to obtain an API key for this service.
# https://developer.twitter.com/en/docs/twitter-api/getting-started/getting-access-to-the-twitter-api

# bearer_token = "<token>"
# refresh_interval = 3600
# max_requests_per_minute = 60




[SERVER]
# The server listens on the specified port for incoming HTTP connections.
# These can either fulfil a REST request or be upgraded to a WebSocket connection.
port = 4080

# Multiple sources can give conflicting data for the same field. This array defines who's data has precedence,
# from highest to lowest. Example for the values below: 
# if XUMM, Bithomp and Twitter all define an icon for a token, the one from XUMM will be used.
source_priorities = ['ledger', 'xrplmeta', 'domain', 'xumm', 'bithomp', 'xrpscan', 'twitter', 'gravatar']

# Historical data is made available in various timeframe formats. 
# The dict key defines the handle by which the timeframe is identified, the value is the interval in seconds.
# https://xrplmeta.org/docs/rest/get-series
timeframes = {15m = 900, 1H = 3600, 4H = 14400, 1D = 86400}